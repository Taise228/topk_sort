// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module topk_sort_topk_sort_Pipeline_VITIS_LOOP_88_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ostrm_TREADY,
        p_reload693,
        p_reload892,
        p_reload891,
        p_reload890,
        p_reload889,
        p_reload888,
        p_reload887,
        p_reload886,
        p_reload885,
        p_reload884,
        p_reload883,
        p_reload882,
        p_reload881,
        p_reload880,
        p_reload879,
        p_reload878,
        p_reload877,
        p_reload876,
        p_reload875,
        p_reload874,
        p_reload873,
        p_reload872,
        p_reload871,
        p_reload870,
        p_reload869,
        p_reload868,
        p_reload867,
        p_reload866,
        p_reload865,
        p_reload864,
        p_reload863,
        p_reload862,
        p_reload861,
        p_reload860,
        p_reload859,
        p_reload858,
        p_reload857,
        p_reload856,
        p_reload855,
        p_reload854,
        p_reload853,
        p_reload852,
        p_reload851,
        p_reload850,
        p_reload849,
        p_reload848,
        p_reload847,
        p_reload846,
        p_reload845,
        p_reload844,
        p_reload843,
        p_reload842,
        p_reload841,
        p_reload840,
        p_reload839,
        p_reload838,
        p_reload837,
        p_reload836,
        p_reload835,
        p_reload834,
        p_reload833,
        p_reload832,
        p_reload831,
        p_reload830,
        p_reload829,
        p_reload828,
        p_reload827,
        p_reload826,
        p_reload825,
        p_reload824,
        p_reload823,
        p_reload822,
        p_reload821,
        p_reload820,
        p_reload819,
        p_reload818,
        p_reload817,
        p_reload816,
        p_reload815,
        p_reload814,
        p_reload813,
        p_reload812,
        p_reload811,
        p_reload810,
        p_reload809,
        p_reload808,
        p_reload807,
        p_reload806,
        p_reload805,
        p_reload804,
        p_reload803,
        p_reload802,
        p_reload801,
        p_reload800,
        p_reload799,
        p_reload798,
        p_reload797,
        p_reload796,
        p_reload795,
        p_reload794,
        ostrm_TDATA,
        ostrm_TVALID,
        ostrm_TKEEP,
        ostrm_TSTRB,
        ostrm_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ostrm_TREADY;
input  [31:0] p_reload693;
input  [31:0] p_reload892;
input  [31:0] p_reload891;
input  [31:0] p_reload890;
input  [31:0] p_reload889;
input  [31:0] p_reload888;
input  [31:0] p_reload887;
input  [31:0] p_reload886;
input  [31:0] p_reload885;
input  [31:0] p_reload884;
input  [31:0] p_reload883;
input  [31:0] p_reload882;
input  [31:0] p_reload881;
input  [31:0] p_reload880;
input  [31:0] p_reload879;
input  [31:0] p_reload878;
input  [31:0] p_reload877;
input  [31:0] p_reload876;
input  [31:0] p_reload875;
input  [31:0] p_reload874;
input  [31:0] p_reload873;
input  [31:0] p_reload872;
input  [31:0] p_reload871;
input  [31:0] p_reload870;
input  [31:0] p_reload869;
input  [31:0] p_reload868;
input  [31:0] p_reload867;
input  [31:0] p_reload866;
input  [31:0] p_reload865;
input  [31:0] p_reload864;
input  [31:0] p_reload863;
input  [31:0] p_reload862;
input  [31:0] p_reload861;
input  [31:0] p_reload860;
input  [31:0] p_reload859;
input  [31:0] p_reload858;
input  [31:0] p_reload857;
input  [31:0] p_reload856;
input  [31:0] p_reload855;
input  [31:0] p_reload854;
input  [31:0] p_reload853;
input  [31:0] p_reload852;
input  [31:0] p_reload851;
input  [31:0] p_reload850;
input  [31:0] p_reload849;
input  [31:0] p_reload848;
input  [31:0] p_reload847;
input  [31:0] p_reload846;
input  [31:0] p_reload845;
input  [31:0] p_reload844;
input  [31:0] p_reload843;
input  [31:0] p_reload842;
input  [31:0] p_reload841;
input  [31:0] p_reload840;
input  [31:0] p_reload839;
input  [31:0] p_reload838;
input  [31:0] p_reload837;
input  [31:0] p_reload836;
input  [31:0] p_reload835;
input  [31:0] p_reload834;
input  [31:0] p_reload833;
input  [31:0] p_reload832;
input  [31:0] p_reload831;
input  [31:0] p_reload830;
input  [31:0] p_reload829;
input  [31:0] p_reload828;
input  [31:0] p_reload827;
input  [31:0] p_reload826;
input  [31:0] p_reload825;
input  [31:0] p_reload824;
input  [31:0] p_reload823;
input  [31:0] p_reload822;
input  [31:0] p_reload821;
input  [31:0] p_reload820;
input  [31:0] p_reload819;
input  [31:0] p_reload818;
input  [31:0] p_reload817;
input  [31:0] p_reload816;
input  [31:0] p_reload815;
input  [31:0] p_reload814;
input  [31:0] p_reload813;
input  [31:0] p_reload812;
input  [31:0] p_reload811;
input  [31:0] p_reload810;
input  [31:0] p_reload809;
input  [31:0] p_reload808;
input  [31:0] p_reload807;
input  [31:0] p_reload806;
input  [31:0] p_reload805;
input  [31:0] p_reload804;
input  [31:0] p_reload803;
input  [31:0] p_reload802;
input  [31:0] p_reload801;
input  [31:0] p_reload800;
input  [31:0] p_reload799;
input  [31:0] p_reload798;
input  [31:0] p_reload797;
input  [31:0] p_reload796;
input  [31:0] p_reload795;
input  [31:0] p_reload794;
output  [31:0] ostrm_TDATA;
output   ostrm_TVALID;
output  [3:0] ostrm_TKEEP;
output  [3:0] ostrm_TSTRB;
output  [0:0] ostrm_TLAST;

reg ap_idle;
reg ostrm_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln88_fu_878_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ostrm_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire   [31:0] pix_data_V_fu_890_p102;
reg   [31:0] pix_data_V_reg_1117;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] pix_last_V_fu_1096_p2;
reg   [0:0] pix_last_V_reg_1122;
reg   [6:0] i_fu_248;
wire   [6:0] add_ln88_fu_884_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

topk_sort_mux_1007_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 32 ),
    .din61_WIDTH( 32 ),
    .din62_WIDTH( 32 ),
    .din63_WIDTH( 32 ),
    .din64_WIDTH( 32 ),
    .din65_WIDTH( 32 ),
    .din66_WIDTH( 32 ),
    .din67_WIDTH( 32 ),
    .din68_WIDTH( 32 ),
    .din69_WIDTH( 32 ),
    .din70_WIDTH( 32 ),
    .din71_WIDTH( 32 ),
    .din72_WIDTH( 32 ),
    .din73_WIDTH( 32 ),
    .din74_WIDTH( 32 ),
    .din75_WIDTH( 32 ),
    .din76_WIDTH( 32 ),
    .din77_WIDTH( 32 ),
    .din78_WIDTH( 32 ),
    .din79_WIDTH( 32 ),
    .din80_WIDTH( 32 ),
    .din81_WIDTH( 32 ),
    .din82_WIDTH( 32 ),
    .din83_WIDTH( 32 ),
    .din84_WIDTH( 32 ),
    .din85_WIDTH( 32 ),
    .din86_WIDTH( 32 ),
    .din87_WIDTH( 32 ),
    .din88_WIDTH( 32 ),
    .din89_WIDTH( 32 ),
    .din90_WIDTH( 32 ),
    .din91_WIDTH( 32 ),
    .din92_WIDTH( 32 ),
    .din93_WIDTH( 32 ),
    .din94_WIDTH( 32 ),
    .din95_WIDTH( 32 ),
    .din96_WIDTH( 32 ),
    .din97_WIDTH( 32 ),
    .din98_WIDTH( 32 ),
    .din99_WIDTH( 32 ),
    .din100_WIDTH( 7 ),
    .dout_WIDTH( 32 ))
mux_1007_32_1_1_U501(
    .din0(p_reload693),
    .din1(p_reload892),
    .din2(p_reload891),
    .din3(p_reload890),
    .din4(p_reload889),
    .din5(p_reload888),
    .din6(p_reload887),
    .din7(p_reload886),
    .din8(p_reload885),
    .din9(p_reload884),
    .din10(p_reload883),
    .din11(p_reload882),
    .din12(p_reload881),
    .din13(p_reload880),
    .din14(p_reload879),
    .din15(p_reload878),
    .din16(p_reload877),
    .din17(p_reload876),
    .din18(p_reload875),
    .din19(p_reload874),
    .din20(p_reload873),
    .din21(p_reload872),
    .din22(p_reload871),
    .din23(p_reload870),
    .din24(p_reload869),
    .din25(p_reload868),
    .din26(p_reload867),
    .din27(p_reload866),
    .din28(p_reload865),
    .din29(p_reload864),
    .din30(p_reload863),
    .din31(p_reload862),
    .din32(p_reload861),
    .din33(p_reload860),
    .din34(p_reload859),
    .din35(p_reload858),
    .din36(p_reload857),
    .din37(p_reload856),
    .din38(p_reload855),
    .din39(p_reload854),
    .din40(p_reload853),
    .din41(p_reload852),
    .din42(p_reload851),
    .din43(p_reload850),
    .din44(p_reload849),
    .din45(p_reload848),
    .din46(p_reload847),
    .din47(p_reload846),
    .din48(p_reload845),
    .din49(p_reload844),
    .din50(p_reload843),
    .din51(p_reload842),
    .din52(p_reload841),
    .din53(p_reload840),
    .din54(p_reload839),
    .din55(p_reload838),
    .din56(p_reload837),
    .din57(p_reload836),
    .din58(p_reload835),
    .din59(p_reload834),
    .din60(p_reload833),
    .din61(p_reload832),
    .din62(p_reload831),
    .din63(p_reload830),
    .din64(p_reload829),
    .din65(p_reload828),
    .din66(p_reload827),
    .din67(p_reload826),
    .din68(p_reload825),
    .din69(p_reload824),
    .din70(p_reload823),
    .din71(p_reload822),
    .din72(p_reload821),
    .din73(p_reload820),
    .din74(p_reload819),
    .din75(p_reload818),
    .din76(p_reload817),
    .din77(p_reload816),
    .din78(p_reload815),
    .din79(p_reload814),
    .din80(p_reload813),
    .din81(p_reload812),
    .din82(p_reload811),
    .din83(p_reload810),
    .din84(p_reload809),
    .din85(p_reload808),
    .din86(p_reload807),
    .din87(p_reload806),
    .din88(p_reload805),
    .din89(p_reload804),
    .din90(p_reload803),
    .din91(p_reload802),
    .din92(p_reload801),
    .din93(p_reload800),
    .din94(p_reload799),
    .din95(p_reload798),
    .din96(p_reload797),
    .din97(p_reload796),
    .din98(p_reload795),
    .din99(p_reload794),
    .din100(ap_sig_allocacmp_i_1),
    .dout(pix_data_V_fu_890_p102)
);

topk_sort_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln88_fu_878_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_248 <= add_ln88_fu_884_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_248 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_878_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_data_V_reg_1117 <= pix_data_V_fu_890_p102;
        pix_last_V_reg_1122 <= pix_last_V_fu_1096_p2;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_878_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_248;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ostrm_TDATA_blk_n = ostrm_TREADY;
    end else begin
        ostrm_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ostrm_TVALID = 1'b1;
    end else begin
        ostrm_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln88_fu_884_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ostrm_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ostrm_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ostrm_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (ostrm_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln88_fu_878_p2 = ((ap_sig_allocacmp_i_1 == 7'd100) ? 1'b1 : 1'b0);

assign ostrm_TDATA = pix_data_V_reg_1117;

assign ostrm_TKEEP = 4'd0;

assign ostrm_TLAST = pix_last_V_reg_1122;

assign ostrm_TSTRB = 4'd0;

assign pix_last_V_fu_1096_p2 = ((ap_sig_allocacmp_i_1 == 7'd99) ? 1'b1 : 1'b0);

endmodule //topk_sort_topk_sort_Pipeline_VITIS_LOOP_88_8
