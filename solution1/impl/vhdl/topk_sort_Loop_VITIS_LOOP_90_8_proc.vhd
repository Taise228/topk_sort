-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity topk_sort_Loop_VITIS_LOOP_90_8_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ostrm_TREADY : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read20 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read21 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read22 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read31 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read32 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read33 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read34 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read35 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read36 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read37 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read38 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read39 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read40 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read41 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read42 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read43 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read44 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read45 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read46 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read47 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read48 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read49 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read50 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read51 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read52 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read53 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read54 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read55 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read56 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read57 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read58 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read59 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read60 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read61 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read62 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read63 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read64 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read65 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read66 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read67 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read68 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read69 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read70 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read71 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read72 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read73 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read74 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read75 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read76 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read77 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read78 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read79 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read80 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read81 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read82 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read83 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read84 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read85 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read86 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read87 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read88 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read89 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read90 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read91 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read92 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read93 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read94 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read95 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read96 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read97 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read98 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read99 : IN STD_LOGIC_VECTOR (31 downto 0);
    ostrm_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ostrm_TVALID : OUT STD_LOGIC;
    ostrm_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ostrm_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ostrm_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of topk_sort_Loop_VITIS_LOOP_90_8_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal regslice_both_ostrm_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln90_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ostrm_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal pix_data_V_fu_890_p102 : STD_LOGIC_VECTOR (31 downto 0);
    signal pix_data_V_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal pix_last_V_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_last_V_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_248 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln90_fu_884_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ostrm_TVALID_int_regslice : STD_LOGIC;
    signal ostrm_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_ostrm_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ostrm_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ostrm_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ostrm_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ostrm_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ostrm_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ostrm_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ostrm_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ostrm_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ostrm_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_207 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component topk_sort_mux_1007_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        din81_WIDTH : INTEGER;
        din82_WIDTH : INTEGER;
        din83_WIDTH : INTEGER;
        din84_WIDTH : INTEGER;
        din85_WIDTH : INTEGER;
        din86_WIDTH : INTEGER;
        din87_WIDTH : INTEGER;
        din88_WIDTH : INTEGER;
        din89_WIDTH : INTEGER;
        din90_WIDTH : INTEGER;
        din91_WIDTH : INTEGER;
        din92_WIDTH : INTEGER;
        din93_WIDTH : INTEGER;
        din94_WIDTH : INTEGER;
        din95_WIDTH : INTEGER;
        din96_WIDTH : INTEGER;
        din97_WIDTH : INTEGER;
        din98_WIDTH : INTEGER;
        din99_WIDTH : INTEGER;
        din100_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (31 downto 0);
        din34 : IN STD_LOGIC_VECTOR (31 downto 0);
        din35 : IN STD_LOGIC_VECTOR (31 downto 0);
        din36 : IN STD_LOGIC_VECTOR (31 downto 0);
        din37 : IN STD_LOGIC_VECTOR (31 downto 0);
        din38 : IN STD_LOGIC_VECTOR (31 downto 0);
        din39 : IN STD_LOGIC_VECTOR (31 downto 0);
        din40 : IN STD_LOGIC_VECTOR (31 downto 0);
        din41 : IN STD_LOGIC_VECTOR (31 downto 0);
        din42 : IN STD_LOGIC_VECTOR (31 downto 0);
        din43 : IN STD_LOGIC_VECTOR (31 downto 0);
        din44 : IN STD_LOGIC_VECTOR (31 downto 0);
        din45 : IN STD_LOGIC_VECTOR (31 downto 0);
        din46 : IN STD_LOGIC_VECTOR (31 downto 0);
        din47 : IN STD_LOGIC_VECTOR (31 downto 0);
        din48 : IN STD_LOGIC_VECTOR (31 downto 0);
        din49 : IN STD_LOGIC_VECTOR (31 downto 0);
        din50 : IN STD_LOGIC_VECTOR (31 downto 0);
        din51 : IN STD_LOGIC_VECTOR (31 downto 0);
        din52 : IN STD_LOGIC_VECTOR (31 downto 0);
        din53 : IN STD_LOGIC_VECTOR (31 downto 0);
        din54 : IN STD_LOGIC_VECTOR (31 downto 0);
        din55 : IN STD_LOGIC_VECTOR (31 downto 0);
        din56 : IN STD_LOGIC_VECTOR (31 downto 0);
        din57 : IN STD_LOGIC_VECTOR (31 downto 0);
        din58 : IN STD_LOGIC_VECTOR (31 downto 0);
        din59 : IN STD_LOGIC_VECTOR (31 downto 0);
        din60 : IN STD_LOGIC_VECTOR (31 downto 0);
        din61 : IN STD_LOGIC_VECTOR (31 downto 0);
        din62 : IN STD_LOGIC_VECTOR (31 downto 0);
        din63 : IN STD_LOGIC_VECTOR (31 downto 0);
        din64 : IN STD_LOGIC_VECTOR (31 downto 0);
        din65 : IN STD_LOGIC_VECTOR (31 downto 0);
        din66 : IN STD_LOGIC_VECTOR (31 downto 0);
        din67 : IN STD_LOGIC_VECTOR (31 downto 0);
        din68 : IN STD_LOGIC_VECTOR (31 downto 0);
        din69 : IN STD_LOGIC_VECTOR (31 downto 0);
        din70 : IN STD_LOGIC_VECTOR (31 downto 0);
        din71 : IN STD_LOGIC_VECTOR (31 downto 0);
        din72 : IN STD_LOGIC_VECTOR (31 downto 0);
        din73 : IN STD_LOGIC_VECTOR (31 downto 0);
        din74 : IN STD_LOGIC_VECTOR (31 downto 0);
        din75 : IN STD_LOGIC_VECTOR (31 downto 0);
        din76 : IN STD_LOGIC_VECTOR (31 downto 0);
        din77 : IN STD_LOGIC_VECTOR (31 downto 0);
        din78 : IN STD_LOGIC_VECTOR (31 downto 0);
        din79 : IN STD_LOGIC_VECTOR (31 downto 0);
        din80 : IN STD_LOGIC_VECTOR (31 downto 0);
        din81 : IN STD_LOGIC_VECTOR (31 downto 0);
        din82 : IN STD_LOGIC_VECTOR (31 downto 0);
        din83 : IN STD_LOGIC_VECTOR (31 downto 0);
        din84 : IN STD_LOGIC_VECTOR (31 downto 0);
        din85 : IN STD_LOGIC_VECTOR (31 downto 0);
        din86 : IN STD_LOGIC_VECTOR (31 downto 0);
        din87 : IN STD_LOGIC_VECTOR (31 downto 0);
        din88 : IN STD_LOGIC_VECTOR (31 downto 0);
        din89 : IN STD_LOGIC_VECTOR (31 downto 0);
        din90 : IN STD_LOGIC_VECTOR (31 downto 0);
        din91 : IN STD_LOGIC_VECTOR (31 downto 0);
        din92 : IN STD_LOGIC_VECTOR (31 downto 0);
        din93 : IN STD_LOGIC_VECTOR (31 downto 0);
        din94 : IN STD_LOGIC_VECTOR (31 downto 0);
        din95 : IN STD_LOGIC_VECTOR (31 downto 0);
        din96 : IN STD_LOGIC_VECTOR (31 downto 0);
        din97 : IN STD_LOGIC_VECTOR (31 downto 0);
        din98 : IN STD_LOGIC_VECTOR (31 downto 0);
        din99 : IN STD_LOGIC_VECTOR (31 downto 0);
        din100 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component topk_sort_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component topk_sort_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mux_1007_32_1_1_U207 : component topk_sort_mux_1007_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 32,
        din33_WIDTH => 32,
        din34_WIDTH => 32,
        din35_WIDTH => 32,
        din36_WIDTH => 32,
        din37_WIDTH => 32,
        din38_WIDTH => 32,
        din39_WIDTH => 32,
        din40_WIDTH => 32,
        din41_WIDTH => 32,
        din42_WIDTH => 32,
        din43_WIDTH => 32,
        din44_WIDTH => 32,
        din45_WIDTH => 32,
        din46_WIDTH => 32,
        din47_WIDTH => 32,
        din48_WIDTH => 32,
        din49_WIDTH => 32,
        din50_WIDTH => 32,
        din51_WIDTH => 32,
        din52_WIDTH => 32,
        din53_WIDTH => 32,
        din54_WIDTH => 32,
        din55_WIDTH => 32,
        din56_WIDTH => 32,
        din57_WIDTH => 32,
        din58_WIDTH => 32,
        din59_WIDTH => 32,
        din60_WIDTH => 32,
        din61_WIDTH => 32,
        din62_WIDTH => 32,
        din63_WIDTH => 32,
        din64_WIDTH => 32,
        din65_WIDTH => 32,
        din66_WIDTH => 32,
        din67_WIDTH => 32,
        din68_WIDTH => 32,
        din69_WIDTH => 32,
        din70_WIDTH => 32,
        din71_WIDTH => 32,
        din72_WIDTH => 32,
        din73_WIDTH => 32,
        din74_WIDTH => 32,
        din75_WIDTH => 32,
        din76_WIDTH => 32,
        din77_WIDTH => 32,
        din78_WIDTH => 32,
        din79_WIDTH => 32,
        din80_WIDTH => 32,
        din81_WIDTH => 32,
        din82_WIDTH => 32,
        din83_WIDTH => 32,
        din84_WIDTH => 32,
        din85_WIDTH => 32,
        din86_WIDTH => 32,
        din87_WIDTH => 32,
        din88_WIDTH => 32,
        din89_WIDTH => 32,
        din90_WIDTH => 32,
        din91_WIDTH => 32,
        din92_WIDTH => 32,
        din93_WIDTH => 32,
        din94_WIDTH => 32,
        din95_WIDTH => 32,
        din96_WIDTH => 32,
        din97_WIDTH => 32,
        din98_WIDTH => 32,
        din99_WIDTH => 32,
        din100_WIDTH => 7,
        dout_WIDTH => 32)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => p_read4,
        din5 => p_read5,
        din6 => p_read6,
        din7 => p_read7,
        din8 => p_read8,
        din9 => p_read9,
        din10 => p_read10,
        din11 => p_read11,
        din12 => p_read12,
        din13 => p_read13,
        din14 => p_read14,
        din15 => p_read15,
        din16 => p_read16,
        din17 => p_read17,
        din18 => p_read18,
        din19 => p_read19,
        din20 => p_read20,
        din21 => p_read21,
        din22 => p_read22,
        din23 => p_read23,
        din24 => p_read24,
        din25 => p_read25,
        din26 => p_read26,
        din27 => p_read27,
        din28 => p_read28,
        din29 => p_read29,
        din30 => p_read30,
        din31 => p_read31,
        din32 => p_read32,
        din33 => p_read33,
        din34 => p_read34,
        din35 => p_read35,
        din36 => p_read36,
        din37 => p_read37,
        din38 => p_read38,
        din39 => p_read39,
        din40 => p_read40,
        din41 => p_read41,
        din42 => p_read42,
        din43 => p_read43,
        din44 => p_read44,
        din45 => p_read45,
        din46 => p_read46,
        din47 => p_read47,
        din48 => p_read48,
        din49 => p_read49,
        din50 => p_read50,
        din51 => p_read51,
        din52 => p_read52,
        din53 => p_read53,
        din54 => p_read54,
        din55 => p_read55,
        din56 => p_read56,
        din57 => p_read57,
        din58 => p_read58,
        din59 => p_read59,
        din60 => p_read60,
        din61 => p_read61,
        din62 => p_read62,
        din63 => p_read63,
        din64 => p_read64,
        din65 => p_read65,
        din66 => p_read66,
        din67 => p_read67,
        din68 => p_read68,
        din69 => p_read69,
        din70 => p_read70,
        din71 => p_read71,
        din72 => p_read72,
        din73 => p_read73,
        din74 => p_read74,
        din75 => p_read75,
        din76 => p_read76,
        din77 => p_read77,
        din78 => p_read78,
        din79 => p_read79,
        din80 => p_read80,
        din81 => p_read81,
        din82 => p_read82,
        din83 => p_read83,
        din84 => p_read84,
        din85 => p_read85,
        din86 => p_read86,
        din87 => p_read87,
        din88 => p_read88,
        din89 => p_read89,
        din90 => p_read90,
        din91 => p_read91,
        din92 => p_read92,
        din93 => p_read93,
        din94 => p_read94,
        din95 => p_read95,
        din96 => p_read96,
        din97 => p_read97,
        din98 => p_read98,
        din99 => p_read99,
        din100 => ap_sig_allocacmp_i_1,
        dout => pix_data_V_fu_890_p102);

    flow_control_loop_pipe_U : component topk_sort_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);

    regslice_both_ostrm_V_data_V_U : component topk_sort_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => pix_data_V_reg_1118,
        vld_in => ostrm_TVALID_int_regslice,
        ack_in => ostrm_TREADY_int_regslice,
        data_out => ostrm_TDATA,
        vld_out => regslice_both_ostrm_V_data_V_U_vld_out,
        ack_out => ostrm_TREADY,
        apdone_blk => regslice_both_ostrm_V_data_V_U_apdone_blk);

    regslice_both_ostrm_V_keep_V_U : component topk_sort_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv4_0,
        vld_in => ostrm_TVALID_int_regslice,
        ack_in => regslice_both_ostrm_V_keep_V_U_ack_in_dummy,
        data_out => ostrm_TKEEP,
        vld_out => regslice_both_ostrm_V_keep_V_U_vld_out,
        ack_out => ostrm_TREADY,
        apdone_blk => regslice_both_ostrm_V_keep_V_U_apdone_blk);

    regslice_both_ostrm_V_strb_V_U : component topk_sort_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv4_0,
        vld_in => ostrm_TVALID_int_regslice,
        ack_in => regslice_both_ostrm_V_strb_V_U_ack_in_dummy,
        data_out => ostrm_TSTRB,
        vld_out => regslice_both_ostrm_V_strb_V_U_vld_out,
        ack_out => ostrm_TREADY,
        apdone_blk => regslice_both_ostrm_V_strb_V_U_apdone_blk);

    regslice_both_ostrm_V_last_V_U : component topk_sort_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => pix_last_V_reg_1123,
        vld_in => ostrm_TVALID_int_regslice,
        ack_in => regslice_both_ostrm_V_last_V_U_ack_in_dummy,
        data_out => ostrm_TLAST,
        vld_out => regslice_both_ostrm_V_last_V_U_vld_out,
        ack_out => ostrm_TREADY,
        apdone_blk => regslice_both_ostrm_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_207)) then
                if ((icmp_ln90_fu_878_p2 = ap_const_lv1_0)) then 
                    i_fu_248 <= add_ln90_fu_884_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_248 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_878_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pix_data_V_reg_1118 <= pix_data_V_fu_890_p102;
                pix_last_V_reg_1123 <= pix_last_V_fu_1096_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln90_fu_884_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, regslice_both_ostrm_V_data_V_U_apdone_blk, ap_loop_exit_ready_pp0_iter1_reg, ap_start_int, ostrm_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (regslice_both_ostrm_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ostrm_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ostrm_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_ostrm_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, regslice_both_ostrm_V_data_V_U_apdone_blk, ap_loop_exit_ready_pp0_iter1_reg, ap_start_int, ostrm_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (regslice_both_ostrm_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ostrm_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ostrm_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_ostrm_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, regslice_both_ostrm_V_data_V_U_apdone_blk, ap_loop_exit_ready_pp0_iter1_reg, ap_start_int, ostrm_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (regslice_both_ostrm_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ostrm_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ostrm_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_ostrm_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(regslice_both_ostrm_V_data_V_U_apdone_blk, ostrm_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ostrm_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_ostrm_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(ostrm_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (ostrm_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_condition_207_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_207 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln90_fu_878_p2, ap_start_int)
    begin
        if (((icmp_ln90_fu_878_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_248, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_248;
        end if; 
    end process;

    icmp_ln90_fu_878_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_64) else "0";

    ostrm_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ostrm_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ostrm_TDATA_blk_n <= ostrm_TREADY_int_regslice;
        else 
            ostrm_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ostrm_TVALID <= regslice_both_ostrm_V_data_V_U_vld_out;

    ostrm_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ostrm_TVALID_int_regslice <= ap_const_logic_1;
        else 
            ostrm_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    pix_last_V_fu_1096_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_63) else "0";
end behav;
