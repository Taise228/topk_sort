-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity topk_sort_topk_sort_Pipeline_VITIS_LOOP_88_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ostrm_TREADY : IN STD_LOGIC;
    p_reload693 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload892 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload891 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload890 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload889 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload888 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload887 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload886 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload885 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload884 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload883 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload882 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload881 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload880 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload879 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload878 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload877 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload876 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload875 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload874 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload873 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload872 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload871 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload870 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload869 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload868 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload867 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload866 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload865 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload864 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload863 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload862 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload861 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload860 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload859 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload858 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload857 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload856 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload855 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload854 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload853 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload852 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload851 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload850 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload849 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload848 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload847 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload846 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload845 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload844 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload843 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload842 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload841 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload840 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload839 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload838 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload837 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload836 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload835 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload834 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload833 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload832 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload831 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload830 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload829 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload828 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload827 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload826 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload825 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload824 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload823 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload822 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload821 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload820 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload819 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload818 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload817 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload816 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload815 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload814 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload813 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload812 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload811 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload810 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload809 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload808 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload807 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload806 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload805 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload804 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload803 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload802 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload801 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload800 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload799 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload798 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload797 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload796 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload795 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload794 : IN STD_LOGIC_VECTOR (31 downto 0);
    ostrm_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ostrm_TVALID : OUT STD_LOGIC;
    ostrm_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    ostrm_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    ostrm_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of topk_sort_topk_sort_Pipeline_VITIS_LOOP_88_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln88_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ostrm_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal pix_data_V_fu_890_p102 : STD_LOGIC_VECTOR (31 downto 0);
    signal pix_data_V_reg_1117 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal pix_last_V_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_last_V_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_248 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln88_fu_884_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component topk_sort_mux_1007_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        din81_WIDTH : INTEGER;
        din82_WIDTH : INTEGER;
        din83_WIDTH : INTEGER;
        din84_WIDTH : INTEGER;
        din85_WIDTH : INTEGER;
        din86_WIDTH : INTEGER;
        din87_WIDTH : INTEGER;
        din88_WIDTH : INTEGER;
        din89_WIDTH : INTEGER;
        din90_WIDTH : INTEGER;
        din91_WIDTH : INTEGER;
        din92_WIDTH : INTEGER;
        din93_WIDTH : INTEGER;
        din94_WIDTH : INTEGER;
        din95_WIDTH : INTEGER;
        din96_WIDTH : INTEGER;
        din97_WIDTH : INTEGER;
        din98_WIDTH : INTEGER;
        din99_WIDTH : INTEGER;
        din100_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (31 downto 0);
        din34 : IN STD_LOGIC_VECTOR (31 downto 0);
        din35 : IN STD_LOGIC_VECTOR (31 downto 0);
        din36 : IN STD_LOGIC_VECTOR (31 downto 0);
        din37 : IN STD_LOGIC_VECTOR (31 downto 0);
        din38 : IN STD_LOGIC_VECTOR (31 downto 0);
        din39 : IN STD_LOGIC_VECTOR (31 downto 0);
        din40 : IN STD_LOGIC_VECTOR (31 downto 0);
        din41 : IN STD_LOGIC_VECTOR (31 downto 0);
        din42 : IN STD_LOGIC_VECTOR (31 downto 0);
        din43 : IN STD_LOGIC_VECTOR (31 downto 0);
        din44 : IN STD_LOGIC_VECTOR (31 downto 0);
        din45 : IN STD_LOGIC_VECTOR (31 downto 0);
        din46 : IN STD_LOGIC_VECTOR (31 downto 0);
        din47 : IN STD_LOGIC_VECTOR (31 downto 0);
        din48 : IN STD_LOGIC_VECTOR (31 downto 0);
        din49 : IN STD_LOGIC_VECTOR (31 downto 0);
        din50 : IN STD_LOGIC_VECTOR (31 downto 0);
        din51 : IN STD_LOGIC_VECTOR (31 downto 0);
        din52 : IN STD_LOGIC_VECTOR (31 downto 0);
        din53 : IN STD_LOGIC_VECTOR (31 downto 0);
        din54 : IN STD_LOGIC_VECTOR (31 downto 0);
        din55 : IN STD_LOGIC_VECTOR (31 downto 0);
        din56 : IN STD_LOGIC_VECTOR (31 downto 0);
        din57 : IN STD_LOGIC_VECTOR (31 downto 0);
        din58 : IN STD_LOGIC_VECTOR (31 downto 0);
        din59 : IN STD_LOGIC_VECTOR (31 downto 0);
        din60 : IN STD_LOGIC_VECTOR (31 downto 0);
        din61 : IN STD_LOGIC_VECTOR (31 downto 0);
        din62 : IN STD_LOGIC_VECTOR (31 downto 0);
        din63 : IN STD_LOGIC_VECTOR (31 downto 0);
        din64 : IN STD_LOGIC_VECTOR (31 downto 0);
        din65 : IN STD_LOGIC_VECTOR (31 downto 0);
        din66 : IN STD_LOGIC_VECTOR (31 downto 0);
        din67 : IN STD_LOGIC_VECTOR (31 downto 0);
        din68 : IN STD_LOGIC_VECTOR (31 downto 0);
        din69 : IN STD_LOGIC_VECTOR (31 downto 0);
        din70 : IN STD_LOGIC_VECTOR (31 downto 0);
        din71 : IN STD_LOGIC_VECTOR (31 downto 0);
        din72 : IN STD_LOGIC_VECTOR (31 downto 0);
        din73 : IN STD_LOGIC_VECTOR (31 downto 0);
        din74 : IN STD_LOGIC_VECTOR (31 downto 0);
        din75 : IN STD_LOGIC_VECTOR (31 downto 0);
        din76 : IN STD_LOGIC_VECTOR (31 downto 0);
        din77 : IN STD_LOGIC_VECTOR (31 downto 0);
        din78 : IN STD_LOGIC_VECTOR (31 downto 0);
        din79 : IN STD_LOGIC_VECTOR (31 downto 0);
        din80 : IN STD_LOGIC_VECTOR (31 downto 0);
        din81 : IN STD_LOGIC_VECTOR (31 downto 0);
        din82 : IN STD_LOGIC_VECTOR (31 downto 0);
        din83 : IN STD_LOGIC_VECTOR (31 downto 0);
        din84 : IN STD_LOGIC_VECTOR (31 downto 0);
        din85 : IN STD_LOGIC_VECTOR (31 downto 0);
        din86 : IN STD_LOGIC_VECTOR (31 downto 0);
        din87 : IN STD_LOGIC_VECTOR (31 downto 0);
        din88 : IN STD_LOGIC_VECTOR (31 downto 0);
        din89 : IN STD_LOGIC_VECTOR (31 downto 0);
        din90 : IN STD_LOGIC_VECTOR (31 downto 0);
        din91 : IN STD_LOGIC_VECTOR (31 downto 0);
        din92 : IN STD_LOGIC_VECTOR (31 downto 0);
        din93 : IN STD_LOGIC_VECTOR (31 downto 0);
        din94 : IN STD_LOGIC_VECTOR (31 downto 0);
        din95 : IN STD_LOGIC_VECTOR (31 downto 0);
        din96 : IN STD_LOGIC_VECTOR (31 downto 0);
        din97 : IN STD_LOGIC_VECTOR (31 downto 0);
        din98 : IN STD_LOGIC_VECTOR (31 downto 0);
        din99 : IN STD_LOGIC_VECTOR (31 downto 0);
        din100 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component topk_sort_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_1007_32_1_1_U501 : component topk_sort_mux_1007_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 32,
        din33_WIDTH => 32,
        din34_WIDTH => 32,
        din35_WIDTH => 32,
        din36_WIDTH => 32,
        din37_WIDTH => 32,
        din38_WIDTH => 32,
        din39_WIDTH => 32,
        din40_WIDTH => 32,
        din41_WIDTH => 32,
        din42_WIDTH => 32,
        din43_WIDTH => 32,
        din44_WIDTH => 32,
        din45_WIDTH => 32,
        din46_WIDTH => 32,
        din47_WIDTH => 32,
        din48_WIDTH => 32,
        din49_WIDTH => 32,
        din50_WIDTH => 32,
        din51_WIDTH => 32,
        din52_WIDTH => 32,
        din53_WIDTH => 32,
        din54_WIDTH => 32,
        din55_WIDTH => 32,
        din56_WIDTH => 32,
        din57_WIDTH => 32,
        din58_WIDTH => 32,
        din59_WIDTH => 32,
        din60_WIDTH => 32,
        din61_WIDTH => 32,
        din62_WIDTH => 32,
        din63_WIDTH => 32,
        din64_WIDTH => 32,
        din65_WIDTH => 32,
        din66_WIDTH => 32,
        din67_WIDTH => 32,
        din68_WIDTH => 32,
        din69_WIDTH => 32,
        din70_WIDTH => 32,
        din71_WIDTH => 32,
        din72_WIDTH => 32,
        din73_WIDTH => 32,
        din74_WIDTH => 32,
        din75_WIDTH => 32,
        din76_WIDTH => 32,
        din77_WIDTH => 32,
        din78_WIDTH => 32,
        din79_WIDTH => 32,
        din80_WIDTH => 32,
        din81_WIDTH => 32,
        din82_WIDTH => 32,
        din83_WIDTH => 32,
        din84_WIDTH => 32,
        din85_WIDTH => 32,
        din86_WIDTH => 32,
        din87_WIDTH => 32,
        din88_WIDTH => 32,
        din89_WIDTH => 32,
        din90_WIDTH => 32,
        din91_WIDTH => 32,
        din92_WIDTH => 32,
        din93_WIDTH => 32,
        din94_WIDTH => 32,
        din95_WIDTH => 32,
        din96_WIDTH => 32,
        din97_WIDTH => 32,
        din98_WIDTH => 32,
        din99_WIDTH => 32,
        din100_WIDTH => 7,
        dout_WIDTH => 32)
    port map (
        din0 => p_reload693,
        din1 => p_reload892,
        din2 => p_reload891,
        din3 => p_reload890,
        din4 => p_reload889,
        din5 => p_reload888,
        din6 => p_reload887,
        din7 => p_reload886,
        din8 => p_reload885,
        din9 => p_reload884,
        din10 => p_reload883,
        din11 => p_reload882,
        din12 => p_reload881,
        din13 => p_reload880,
        din14 => p_reload879,
        din15 => p_reload878,
        din16 => p_reload877,
        din17 => p_reload876,
        din18 => p_reload875,
        din19 => p_reload874,
        din20 => p_reload873,
        din21 => p_reload872,
        din22 => p_reload871,
        din23 => p_reload870,
        din24 => p_reload869,
        din25 => p_reload868,
        din26 => p_reload867,
        din27 => p_reload866,
        din28 => p_reload865,
        din29 => p_reload864,
        din30 => p_reload863,
        din31 => p_reload862,
        din32 => p_reload861,
        din33 => p_reload860,
        din34 => p_reload859,
        din35 => p_reload858,
        din36 => p_reload857,
        din37 => p_reload856,
        din38 => p_reload855,
        din39 => p_reload854,
        din40 => p_reload853,
        din41 => p_reload852,
        din42 => p_reload851,
        din43 => p_reload850,
        din44 => p_reload849,
        din45 => p_reload848,
        din46 => p_reload847,
        din47 => p_reload846,
        din48 => p_reload845,
        din49 => p_reload844,
        din50 => p_reload843,
        din51 => p_reload842,
        din52 => p_reload841,
        din53 => p_reload840,
        din54 => p_reload839,
        din55 => p_reload838,
        din56 => p_reload837,
        din57 => p_reload836,
        din58 => p_reload835,
        din59 => p_reload834,
        din60 => p_reload833,
        din61 => p_reload832,
        din62 => p_reload831,
        din63 => p_reload830,
        din64 => p_reload829,
        din65 => p_reload828,
        din66 => p_reload827,
        din67 => p_reload826,
        din68 => p_reload825,
        din69 => p_reload824,
        din70 => p_reload823,
        din71 => p_reload822,
        din72 => p_reload821,
        din73 => p_reload820,
        din74 => p_reload819,
        din75 => p_reload818,
        din76 => p_reload817,
        din77 => p_reload816,
        din78 => p_reload815,
        din79 => p_reload814,
        din80 => p_reload813,
        din81 => p_reload812,
        din82 => p_reload811,
        din83 => p_reload810,
        din84 => p_reload809,
        din85 => p_reload808,
        din86 => p_reload807,
        din87 => p_reload806,
        din88 => p_reload805,
        din89 => p_reload804,
        din90 => p_reload803,
        din91 => p_reload802,
        din92 => p_reload801,
        din93 => p_reload800,
        din94 => p_reload799,
        din95 => p_reload798,
        din96 => p_reload797,
        din97 => p_reload796,
        din98 => p_reload795,
        din99 => p_reload794,
        din100 => ap_sig_allocacmp_i_1,
        dout => pix_data_V_fu_890_p102);

    flow_control_loop_pipe_sequential_init_U : component topk_sort_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln88_fu_878_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_248 <= add_ln88_fu_884_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_248 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_fu_878_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pix_data_V_reg_1117 <= pix_data_V_fu_890_p102;
                pix_last_V_reg_1122 <= pix_last_V_fu_1096_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln88_fu_884_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ostrm_TREADY)
    begin
                ap_block_pp0_stage0_01001 <= ((ostrm_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ostrm_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((ostrm_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ostrm_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((ostrm_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(ostrm_TREADY)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (ostrm_TREADY = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln88_fu_878_p2)
    begin
        if (((icmp_ln88_fu_878_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_248, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_248;
        end if; 
    end process;

    icmp_ln88_fu_878_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_64) else "0";
    ostrm_TDATA <= pix_data_V_reg_1117;

    ostrm_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ostrm_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ostrm_TDATA_blk_n <= ostrm_TREADY;
        else 
            ostrm_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ostrm_TKEEP <= ap_const_lv4_0;
    ostrm_TLAST <= pix_last_V_reg_1122;
    ostrm_TSTRB <= ap_const_lv4_0;

    ostrm_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ostrm_TVALID <= ap_const_logic_1;
        else 
            ostrm_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    pix_last_V_fu_1096_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_63) else "0";
end behav;
